(define (d a r)
  (if (pair? r)
      (case (car r)
	((empty) '(empty))
	((epsilon) '(empty))
	((any) '(epsilon))
	((symbol) (if (eq? a (cadr r)) '(epsilon) '(empty)))
	((seq) `(or (seq ,(d a (cadr r)) ,(caddr r))
		    (seq ,(v1 (cadr r)) ,(d a (caddr r)))))
	((kleene) `(seq ,(d a (cadr r)) (kleene ,(cadr r))))
	((or) `(or ,(d a (cadr r)) ,(d a (caddr r))))
	(else (error (list "not sure" r))))
      (error (list "bad regex") r)
      ))

(define (v r)
  (case (car r)
    ((empty) #f)
    ((epsilon) #t)
    ((symbol) #f)
    ((seq) (and (v (cadr r)) (v (caddr r))))
    ((kleene) #t)
    ((or) (or (v (cadr r)) (v (caddr r))))))

(define (v1 r) (if (v r) '(epsilon) '(empty)))

(define-rewrite-system regex-simplify
  ((kleene (kleene r)) --> (kleene r))
  ((or (epsilon) (seq r (kleene r))) --> (kleene r))
  ((or (seq r (kleene r)) (epsilon)) --> (kleene r))
  ((seq (empty) r) --> (empty))
  ((seq r (empty)) --> (empty))
  ((seq (epsilon) r) --> r)
  ((seq r (epsilon)) --> r)
  ((or (empty) r) --> r)
  ((or r (empty)) --> r)
  ((or r r) --> r)
  ((seq (seq a b) c) --> (seq a (seq b c)))
  ((or (or a b) c) --> (or a (or b c)))
  ;((seq (or r1 r2) r) --> (or (seq r1 r) (seq r2 r)))
  ;((seq r (or r1 r2)) --> (or (seq r r1) (seq r r2)))
  )

;; (display (d #\c '(kleene (symbol #\c))))

;; (merge ((branch (decons)
;; 		((branch (compare-equal? 'or)
;; 			 ((branch (decons)
;; 				  ((branch (decons)
;; 					   ((branch (compare-equal? 'empty)
;; 						    ((branch (compare-equal? '())
;; 							     ((branch (decons)
;; 								      ((branch (bind r)
;; 									       ((branch (compare-equal? '())
;; 											((branch (guard #t)
;; 												 ((branch (execute r) ())))))))))))))))
;; 				   (branch (bind r)
;; 					   ((branch (decons)
;; 						    ((branch (decons)
;; 							     ((branch (compare-equal? 'empty)
;; 								      ((branch (compare-equal? '())
;; 									       ((branch (compare-equal? '())
;; 											((branch (guard #t)
;; 												 ((branch (execute r) ())))))))))))))))))))))))
